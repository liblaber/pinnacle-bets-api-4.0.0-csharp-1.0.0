// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PinnacleBets.Json;

namespace PinnacleBets.Models;

/// <summary>Request to place a bet</summary>
public record PlaceParlayBetRequest(
    /// <value>This unique id of the place bet requests. This is to support idempotent requests.</value>
    [property:
        JsonPropertyName("uniqueRequestId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? UniqueRequestId = null,
    /// <value>Whether or not to accept a bet when there is a line change in favor of the client.</value>
    [property:
        JsonPropertyName("acceptBetterLine"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? AcceptBetterLine = null,
    /// <value>Amount in clientâ€™s currency. It is always risk amount when placing Parlay bets NOTE: If round robin options is used this amount will apply for all parlays so actual amount wagered will be riskAmount X number of Parlays.</value>
    [property:
        JsonPropertyName("riskAmount"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? RiskAmount = null,
    /// <value>
    /// Bet odds format.
    /// AMERICAN = American odds format,
    /// DECIMAL = Decimal (European) odds format,
    /// HONGKONG = Hong Kong odds format,
    /// INDONESIAN = Indonesian odds format,
    /// MALAY = Malaysian odds format
    /// </value>
    [property:
        JsonPropertyName("oddsFormat"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        OddsFormat? OddsFormat = null,
    /// <value>Collection of parlay legs.</value>
    [property:
        JsonPropertyName("legs"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<ParlayLegRequest>? Legs = null,
    [property:
        JsonPropertyName("roundRobinOptions"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<PlaceParlayBetRequest.RoundRobinOptions>? RoundRobinOptions_ = null
)
{
    public record RoundRobinOptions : ValueEnum<string>
    {
        internal RoundRobinOptions(string value)
            : base(value) { }

        public RoundRobinOptions()
            : base("Parlay") { }

        public static RoundRobinOptions Parlay = new("Parlay");
        public static RoundRobinOptions TwoLegRoundRobin = new("TwoLegRoundRobin");
        public static RoundRobinOptions ThreeLegRoundRobin = new("ThreeLegRoundRobin");
        public static RoundRobinOptions FourLegRoundRobin = new("FourLegRoundRobin");
        public static RoundRobinOptions FiveLegRoundRobin = new("FiveLegRoundRobin");
        public static RoundRobinOptions SixLegRoundRobin = new("SixLegRoundRobin");
        public static RoundRobinOptions SevenLegRoundRobin = new("SevenLegRoundRobin");
        public static RoundRobinOptions EightLegRoundRobin = new("EightLegRoundRobin");
    }
}
