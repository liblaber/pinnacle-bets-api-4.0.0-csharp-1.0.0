// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PinnacleBets.Json;

namespace PinnacleBets.Models;

public record TeaserLeg(
    [property:
        JsonPropertyName("sportId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? SportId = null,
    /// <value>Teaser leg type.</value>
    [property:
        JsonPropertyName("legBetType"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        TeaserLeg.TeaserLegLegBetType? LegBetType = null,
    /// <value>
    /// CANCELLED = The leg is canceled- the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,
    /// LOSE = The leg is a loss or a push-lose. When Push-lose happens, the half of the stake on the leg will be pushed to the next leg, and the other half will be a lose. This can happen only when the leg is placed on a quarter points handicap,
    /// PUSHED = The leg is a push - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,
    /// REFUNDED = The leg is refunded - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,
    /// WON = The leg is a won or a push-won. When Push-won happens, the half of the stake on the leg will be pushed to the next leg, and the other half is won. This can happen only when the leg is placed on a quarter points handicap
    /// </value>
    [property:
        JsonPropertyName("legBetStatus"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        TeaserLeg.TeaserLegLegBetStatus? LegBetStatus = null,
    [property:
        JsonPropertyName("leagueId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? LeagueId = null,
    [property:
        JsonPropertyName("eventId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? EventId = null,
    /// <value>Date time when the event starts.</value>
    [property:
        JsonPropertyName("eventStartTime"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? EventStartTime = null,
    [property:
        JsonPropertyName("handicap"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? Handicap = null,
    [property:
        JsonPropertyName("teamName"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? TeamName = null,
    /// <value>Side type.</value>
    [property:
        JsonPropertyName("side"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        TeaserLeg.TeaserLegSide? Side = null,
    [property:
        JsonPropertyName("team1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Team1 = null,
    [property:
        JsonPropertyName("team2"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Team2 = null,
    [property:
        JsonPropertyName("periodNumber"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? PeriodNumber = null
)
{
    /// <summary>Teaser leg type.</summary>
    public record TeaserLegLegBetType : ValueEnum<string>
    {
        internal TeaserLegLegBetType(string value)
            : base(value) { }

        public TeaserLegLegBetType()
            : base("SPREAD") { }

        public static TeaserLegLegBetType Spread = new("SPREAD");
        public static TeaserLegLegBetType TotalPoints = new("TOTAL_POINTS");
    }

    /// <summary>
    /// CANCELLED = The leg is canceled- the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,
    /// LOSE = The leg is a loss or a push-lose. When Push-lose happens, the half of the stake on the leg will be pushed to the next leg, and the other half will be a lose. This can happen only when the leg is placed on a quarter points handicap,
    /// PUSHED = The leg is a push - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,
    /// REFUNDED = The leg is refunded - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,
    /// WON = The leg is a won or a push-won. When Push-won happens, the half of the stake on the leg will be pushed to the next leg, and the other half is won. This can happen only when the leg is placed on a quarter points handicap
    /// </summary>
    public record TeaserLegLegBetStatus : ValueEnum<string>
    {
        internal TeaserLegLegBetStatus(string value)
            : base(value) { }

        public TeaserLegLegBetStatus()
            : base("CANCELLED") { }

        public static TeaserLegLegBetStatus Cancelled = new("CANCELLED");
        public static TeaserLegLegBetStatus Lost = new("LOST");
        public static TeaserLegLegBetStatus Pushed = new("PUSHED");
        public static TeaserLegLegBetStatus Refunded = new("REFUNDED");
        public static TeaserLegLegBetStatus Won = new("WON");
    }

    /// <summary>Side type.</summary>
    public record TeaserLegSide : ValueEnum<string>
    {
        internal TeaserLegSide(string value)
            : base(value) { }

        public TeaserLegSide()
            : base("OVER") { }

        public static TeaserLegSide Over = new("OVER");
        public static TeaserLegSide Under = new("UNDER");
    }
}
