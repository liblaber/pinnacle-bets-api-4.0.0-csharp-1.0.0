// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PinnacleBets.Json;

namespace PinnacleBets.Models;

public record PlaceParlayBetResponse(
    /// <value>Status of the response.</value>
    [property:
        JsonPropertyName("status"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PlaceParlayBetResponse.PlaceParlayBetResponseStatus? Status = null,
    /// <value>
    /// When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
    ///
    ///
    /// ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,
    /// ALL_BETTING_CLOSED = Betting is not allowed at this moment,
    /// BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,
    /// BLOCKED_BETTING = Betting is suspended for the client,
    /// BLOCKED_CLIENT = Client is no longer active,
    /// INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,
    /// INVALID_COUNTRY = Client country is not allowed for betting,
    /// INVALID_LEGS = One or more legs are invalid,
    /// INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,
    /// INVALID_ROUND_ROBIN_OPTIONS = Round robin options are invalid (i.e. does not match with number of legs),
    /// ROUND_ROBIN_DISALLOWED = Round robin is disallowed for one of the leagues,
    /// TOO_MANY_LEGS = Maximum of 10 legs can be specified,
    /// TOO_FEW_LEGS = At least 2 legs are required for Parlay,
    /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,
    /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,
    /// INVALID_REQUEST = Request has invalid parameters,
    /// DUPLICATED_REQUEST = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,
    /// SYSTEM_ERROR_3 = Unexpected error
    /// </value>
    [property: JsonPropertyName("errorCode")]
        PlaceParlayBetResponse.PlaceParlayBetResponseErrorCode? ErrorCode = null,
    /// <value>Id of a newly created bet.</value>
    [property:
        JsonPropertyName("betId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? BetId = null,
    /// <value>Unique identifier provided in the request.</value>
    [property:
        JsonPropertyName("uniqueRequestId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? UniqueRequestId = null,
    /// <value>Provides array with all acceptable Round Robin options with parlay odds for that option.</value>
    [property:
        JsonPropertyName("roundRobinOptionWithOdds"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<RoundRobinOptionWithOdds>? RoundRobinOptionWithOdds = null,
    /// <value>Maximum stake amount</value>
    [property:
        JsonPropertyName("maxRiskStake"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? MaxRiskStake = null,
    /// <value>Minimum stake amount</value>
    [property:
        JsonPropertyName("minRiskStake"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? MinRiskStake = null,
    /// <value>Collection of valid legs (format described below). Can be empty if no valid legs found.</value>
    [property:
        JsonPropertyName("validLegs"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<ParlayLegResponse>? ValidLegs = null,
    /// <value>The collection of legs that resulted in error (format described below). Can be empty if no invalid legs found.</value>
    [property:
        JsonPropertyName("invalidLegs"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<ParlayLegResponse>? InvalidLegs = null
)
{
    /// <summary>Status of the response.</summary>
    public record PlaceParlayBetResponseStatus : ValueEnum<string>
    {
        internal PlaceParlayBetResponseStatus(string value)
            : base(value) { }

        public PlaceParlayBetResponseStatus()
            : base("ACCEPTED") { }

        public static PlaceParlayBetResponseStatus Accepted = new("ACCEPTED");
        public static PlaceParlayBetResponseStatus ProcessedWithError = new("PROCESSED_WITH_ERROR");
    }

    /// <summary>
    /// When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
    ///
    ///
    /// ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,
    /// ALL_BETTING_CLOSED = Betting is not allowed at this moment,
    /// BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,
    /// BLOCKED_BETTING = Betting is suspended for the client,
    /// BLOCKED_CLIENT = Client is no longer active,
    /// INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,
    /// INVALID_COUNTRY = Client country is not allowed for betting,
    /// INVALID_LEGS = One or more legs are invalid,
    /// INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,
    /// INVALID_ROUND_ROBIN_OPTIONS = Round robin options are invalid (i.e. does not match with number of legs),
    /// ROUND_ROBIN_DISALLOWED = Round robin is disallowed for one of the leagues,
    /// TOO_MANY_LEGS = Maximum of 10 legs can be specified,
    /// TOO_FEW_LEGS = At least 2 legs are required for Parlay,
    /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,
    /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,
    /// INVALID_REQUEST = Request has invalid parameters,
    /// DUPLICATED_REQUEST = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,
    /// SYSTEM_ERROR_3 = Unexpected error
    /// </summary>
    public record PlaceParlayBetResponseErrorCode : ValueEnum<string>
    {
        internal PlaceParlayBetResponseErrorCode(string value)
            : base(value) { }

        public PlaceParlayBetResponseErrorCode()
            : base("ABOVE_MAX_BET_AMOUNT") { }

        public static PlaceParlayBetResponseErrorCode AboveMaxBetAmount =
            new("ABOVE_MAX_BET_AMOUNT");
        public static PlaceParlayBetResponseErrorCode AllBettingClosed = new("ALL_BETTING_CLOSED");
        public static PlaceParlayBetResponseErrorCode BelowMinBetAmount =
            new("BELOW_MIN_BET_AMOUNT");
        public static PlaceParlayBetResponseErrorCode BlockedBetting = new("BLOCKED_BETTING");
        public static PlaceParlayBetResponseErrorCode BlockedClient = new("BLOCKED_CLIENT");
        public static PlaceParlayBetResponseErrorCode InsufficientFunds = new("INSUFFICIENT_FUNDS");
        public static PlaceParlayBetResponseErrorCode InvalidCountry = new("INVALID_COUNTRY");
        public static PlaceParlayBetResponseErrorCode InvalidLegs = new("INVALID_LEGS");
        public static PlaceParlayBetResponseErrorCode InvalidOddsFormat =
            new("INVALID_ODDS_FORMAT");
        public static PlaceParlayBetResponseErrorCode InvalidRoundRobinOptions =
            new("INVALID_ROUND_ROBIN_OPTIONS");
        public static PlaceParlayBetResponseErrorCode RoundRobinDisallowed =
            new("ROUND_ROBIN_DISALLOWED");
        public static PlaceParlayBetResponseErrorCode TooManyLegs = new("TOO_MANY_LEGS");
        public static PlaceParlayBetResponseErrorCode TooFewLegs = new("TOO_FEW_LEGS");
        public static PlaceParlayBetResponseErrorCode ResponsibleBettingRiskLimitExceeded =
            new("RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED");
        public static PlaceParlayBetResponseErrorCode ResponsibleBettingLossLimitExceeded =
            new("RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED");
        public static PlaceParlayBetResponseErrorCode InvalidRequest = new("INVALID_REQUEST");
        public static PlaceParlayBetResponseErrorCode DuplicatedRequest = new("DUPLICATED_REQUEST");
        public static PlaceParlayBetResponseErrorCode SystemError3 = new("SYSTEM_ERROR_3");
    }
}
