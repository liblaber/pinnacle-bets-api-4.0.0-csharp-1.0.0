// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PinnacleBets.Json;

namespace PinnacleBets.Models;

public record StraightBetV4(
    /// <value>Bet identification</value>
    [property: JsonPropertyName("betId")]
        long BetId,
    /// <value>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</value>
    [property: JsonPropertyName("wagerNumber")]
        long WagerNumber,
    /// <value>Date time when the bet was placed.</value>
    [property: JsonPropertyName("placedAt")]
        string PlacedAt,
    /// <value>
    /// Bet Status.
    ///
    /// ACCEPTED = Bet was accepted.
    /// PUSHED = Bet was pushed.
    /// CANCELLED = Bet is cancelled as per Pinnacle betting rules.
    /// LOST = The bet is settled as lose.
    /// PENDING_ACCEPTANCE = This status is reserved only for live bets. If a live bet is placed during danger zone or live delay is applied, it will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From this status bet can go to ACCEPTED or NOT_ACCEPTED status.
    /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status.
    /// NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only if it was previously in PENDING_ACCEPTANCE status.
    /// WON = The bet is settled as won.
    /// HALF_WON_HALF_PUSHED = The bet is settled as half won half pushed. Only for asian handicap bets.
    /// HALF_LOST_HALF_PUSHED =  The bet is settled as half lost half pushed. Only for asian handicap bets.
    /// </value>
    [property: JsonPropertyName("betStatus")]
        StraightBetV4.StraightBetV4BetStatus BetStatus,
    /// <value>Bet type.</value>
    [property: JsonPropertyName("betType")]
        StraightBetV4.StraightBetV4BetType BetType,
    /// <value>Win amount.</value>
    [property: JsonPropertyName("win")]
        double Win,
    /// <value>Risk amount.</value>
    [property: JsonPropertyName("risk")]
        double Risk,
    /// <value>
    /// Bet odds format.
    /// AMERICAN = American odds format,
    /// DECIMAL = Decimal (European) odds format,
    /// HONGKONG = Hong Kong odds format,
    /// INDONESIAN = Indonesian odds format,
    /// MALAY = Malaysian odds format
    /// </value>
    [property: JsonPropertyName("oddsFormat")]
        OddsFormat OddsFormat,
    /// <value>Update Sequence</value>
    [property: JsonPropertyName("updateSequence")]
        long UpdateSequence,
    /// <value>Win-Loss for settled bets.</value>
    [property: JsonPropertyName("winLoss")]
        double? WinLoss = null,
    /// <value>Clientâ€™s commission on the bet.</value>
    [property: JsonPropertyName("customerCommission")]
        double? CustomerCommission = null,
    /// <value>
    /// Possible keys \:
    /// * correctTeam1Id
    /// * correctTeam2Id
    /// * correctListedPitcher1
    /// * correctListedPitcher2
    /// * correctSpread
    /// * correctTotalPoints
    /// * correctTeam1TotalPoints
    /// * correctTeam2TotalPoints
    /// * correctTeam1Score
    /// * correctTeam2Score
    /// * correctTeam1TennisSetsScore
    /// * correctTeam2TennisSetsScore
    /// </value>
    [property:
        JsonPropertyName("cancellationReason"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        CancellationReason? CancellationReason = null,
    [property:
        JsonPropertyName("sportId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? SportId = null,
    [property:
        JsonPropertyName("leagueId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? LeagueId = null,
    [property:
        JsonPropertyName("eventId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? EventId = null,
    [property: JsonPropertyName("handicap")] double? Handicap = null,
    [property:
        JsonPropertyName("price"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? Price = null,
    [property:
        JsonPropertyName("teamName"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? TeamName = null,
    /// <value>Side type.</value>
    [property: JsonPropertyName("side")]
        StraightBetV4.StraightBetV4Side? Side = null,
    [property:
        JsonPropertyName("team1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Team1 = null,
    [property:
        JsonPropertyName("team2"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Team2 = null,
    [property:
        JsonPropertyName("periodNumber"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? PeriodNumber = null,
    /// <value>Team 1 on the period that the bet was placed on at the moment of placing a bet, only for live bets.</value>
    [property: JsonPropertyName("team1Score")]
        double? Team1Score = null,
    /// <value>Team 2 on the period that the bet was placed on at the moment of placing a bet, only for live bets.</value>
    [property: JsonPropertyName("team2Score")]
        double? Team2Score = null,
    /// <value>Full time team 1 score, only for settled bets.</value>
    [property: JsonPropertyName("ftTeam1Score")]
        double? FtTeam1Score = null,
    /// <value>Full time team 2 score, only for settled bets.</value>
    [property: JsonPropertyName("ftTeam2Score")]
        double? FtTeam2Score = null,
    /// <value>.End of period team 1 score, only for settled bets. If the bet was placed on Game period (periodNumber =0), this will be null .</value>
    [property: JsonPropertyName("pTeam1Score")]
        double? PTeam1Score = null,
    /// <value>End of period team 2 score, only for settled bets. If the bet was placed on Game period (periodNumber =0), this will be null</value>
    [property: JsonPropertyName("pTeam2Score")]
        double? PTeam2Score = null,
    /// <value>Whether the bet is on live event</value>
    [property:
        JsonPropertyName("isLive"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? IsLive = null,
    /// <value>Date time when the event starts.</value>
    [property:
        JsonPropertyName("eventStartTime"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? EventStartTime = null
)
{
    /// <summary>
    /// Bet Status.
    ///
    /// ACCEPTED = Bet was accepted.
    /// PUSHED = Bet was pushed.
    /// CANCELLED = Bet is cancelled as per Pinnacle betting rules.
    /// LOST = The bet is settled as lose.
    /// PENDING_ACCEPTANCE = This status is reserved only for live bets. If a live bet is placed during danger zone or live delay is applied, it will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From this status bet can go to ACCEPTED or NOT_ACCEPTED status.
    /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status.
    /// NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only if it was previously in PENDING_ACCEPTANCE status.
    /// WON = The bet is settled as won.
    /// HALF_WON_HALF_PUSHED = The bet is settled as half won half pushed. Only for asian handicap bets.
    /// HALF_LOST_HALF_PUSHED =  The bet is settled as half lost half pushed. Only for asian handicap bets.
    /// </summary>
    public record StraightBetV4BetStatus : ValueEnum<string>
    {
        internal StraightBetV4BetStatus(string value)
            : base(value) { }

        public StraightBetV4BetStatus()
            : base("ACCEPTED") { }

        public static StraightBetV4BetStatus Accepted = new("ACCEPTED");
        public static StraightBetV4BetStatus Cancelled = new("CANCELLED");
        public static StraightBetV4BetStatus Lost = new("LOST");
        public static StraightBetV4BetStatus PendingAcceptance = new("PENDING_ACCEPTANCE");
        public static StraightBetV4BetStatus Refunded = new("REFUNDED");
        public static StraightBetV4BetStatus Pushed = new("PUSHED");
        public static StraightBetV4BetStatus NotAccepted = new("NOT_ACCEPTED");
        public static StraightBetV4BetStatus Won = new("WON");
        public static StraightBetV4BetStatus HalfWonHalfPushed = new("HALF_WON_HALF_PUSHED");
        public static StraightBetV4BetStatus HalfLostHalfPushed = new("HALF_LOST_HALF_PUSHED");
    }

    /// <summary>Bet type.</summary>
    public record StraightBetV4BetType : ValueEnum<string>
    {
        internal StraightBetV4BetType(string value)
            : base(value) { }

        public StraightBetV4BetType()
            : base("MONEYLINE") { }

        public static StraightBetV4BetType Moneyline = new("MONEYLINE");
        public static StraightBetV4BetType TeamTotalPoints = new("TEAM_TOTAL_POINTS");
        public static StraightBetV4BetType Spread = new("SPREAD");
        public static StraightBetV4BetType TotalPoints = new("TOTAL_POINTS");
        public static StraightBetV4BetType Special = new("SPECIAL");
        public static StraightBetV4BetType Parlay = new("PARLAY");
        public static StraightBetV4BetType Teaser = new("TEASER");
        public static StraightBetV4BetType Manual = new("MANUAL");
    }

    /// <summary>Side type.</summary>
    public record StraightBetV4Side : ValueEnum<string>
    {
        internal StraightBetV4Side(string value)
            : base(value) { }

        public StraightBetV4Side()
            : base("OVER") { }

        public static StraightBetV4Side Over = new("OVER");
        public static StraightBetV4Side Under = new("UNDER");
    }
}
