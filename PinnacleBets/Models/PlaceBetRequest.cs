// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PinnacleBets.Json;

namespace PinnacleBets.Models;

/// <summary>Request to place a bet.</summary>
public record PlaceBetRequest(
    /// <value>
    /// Bet odds format.
    /// AMERICAN = American odds format,
    /// DECIMAL = Decimal (European) odds format,
    /// HONGKONG = Hong Kong odds format,
    /// INDONESIAN = Indonesian odds format,
    /// MALAY = Malaysian odds format
    /// </value>
    [property:
        JsonPropertyName("oddsFormat"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        OddsFormat? OddsFormat = null,
    /// <value>This is a Unique ID for PlaceBet requests. This is to support idempotent requests.</value>
    [property:
        JsonPropertyName("uniqueRequestId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? UniqueRequestId = null,
    /// <value>Whether or not to accept a bet when there is a line change in favor of the client.</value>
    [property:
        JsonPropertyName("acceptBetterLine"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? AcceptBetterLine = null,
    /// <value>amount in clientâ€™s currency.</value>
    [property:
        JsonPropertyName("stake"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? Stake = null,
    /// <value>Whether the stake amount is risk or win amount.</value>
    [property:
        JsonPropertyName("winRiskStake"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PlaceBetRequest.PlaceBetRequestWinRiskStake? WinRiskStake = null,
    /// <value>Line identification.</value>
    [property:
        JsonPropertyName("lineId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? LineId = null,
    /// <value>Alternate line identification.</value>
    [property: JsonPropertyName("altLineId")]
        long? AltLineId = null,
    /// <value>
    /// NORMAL - bet will be placed on specified stake.
    /// FILLANDKILL - If the stake is over the max limit, bet will be placed on max limit, otherwise it will be placed on specified stake.
    /// FILLMAXLIMIT - bet will be places on max limit, stake amount will be ignored. Please note that maximum limits can change at any moment, which may result in risking more than anticipated. This option is replacement of isMaxStakeBet from v1/bets/place'
    /// </value>
    [property:
        JsonPropertyName("fillType"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PlaceBetRequest.FillType? FillType_ = null,
    [property:
        JsonPropertyName("sportId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? SportId = null,
    [property:
        JsonPropertyName("eventId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? EventId = null,
    [property:
        JsonPropertyName("periodNumber"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? PeriodNumber = null,
    /// <value>Bet type.</value>
    [property:
        JsonPropertyName("betType"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PlaceBetRequest.PlaceBetRequestBetType? BetType = null,
    /// <value>Team type.</value>
    [property:
        JsonPropertyName("team"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PlaceBetRequest.Team? Team_ = null,
    /// <value>Side type.</value>
    [property: JsonPropertyName("side")]
        PlaceBetRequest.PlaceBetRequestSide? Side = null
)
{
    /// <summary>Whether the stake amount is risk or win amount.</summary>
    public record PlaceBetRequestWinRiskStake : ValueEnum<string>
    {
        internal PlaceBetRequestWinRiskStake(string value)
            : base(value) { }

        public PlaceBetRequestWinRiskStake()
            : base("WIN") { }

        public static PlaceBetRequestWinRiskStake Win = new("WIN");
        public static PlaceBetRequestWinRiskStake Risk = new("RISK");
    }

    /// <summary>
    /// NORMAL - bet will be placed on specified stake.
    /// FILLANDKILL - If the stake is over the max limit, bet will be placed on max limit, otherwise it will be placed on specified stake.
    /// FILLMAXLIMIT - bet will be places on max limit, stake amount will be ignored. Please note that maximum limits can change at any moment, which may result in risking more than anticipated. This option is replacement of isMaxStakeBet from v1/bets/place'
    /// </summary>
    public record FillType : ValueEnum<string>
    {
        internal FillType(string value)
            : base(value) { }

        public FillType()
            : base("NORMAL") { }

        public static FillType Normal = new("NORMAL");
        public static FillType Fillandkill = new("FILLANDKILL");
        public static FillType Fillmaxlimit = new("FILLMAXLIMIT");
    }

    /// <summary>Bet type.</summary>
    public record PlaceBetRequestBetType : ValueEnum<string>
    {
        internal PlaceBetRequestBetType(string value)
            : base(value) { }

        public PlaceBetRequestBetType()
            : base("MONEYLINE") { }

        public static PlaceBetRequestBetType Moneyline = new("MONEYLINE");
        public static PlaceBetRequestBetType TeamTotalPoints = new("TEAM_TOTAL_POINTS");
        public static PlaceBetRequestBetType Spread = new("SPREAD");
        public static PlaceBetRequestBetType TotalPoints = new("TOTAL_POINTS");
    }

    /// <summary>Team type.</summary>
    public record Team : ValueEnum<string>
    {
        internal Team(string value)
            : base(value) { }

        public Team()
            : base("TEAM1") { }

        public static Team Team1 = new("TEAM1");
        public static Team Team2 = new("TEAM2");
        public static Team Draw = new("DRAW");
    }

    /// <summary>Side type.</summary>
    public record PlaceBetRequestSide : ValueEnum<string>
    {
        internal PlaceBetRequestSide(string value)
            : base(value) { }

        public PlaceBetRequestSide()
            : base("OVER") { }

        public static PlaceBetRequestSide Over = new("OVER");
        public static PlaceBetRequestSide Under = new("UNDER");
    }
}
