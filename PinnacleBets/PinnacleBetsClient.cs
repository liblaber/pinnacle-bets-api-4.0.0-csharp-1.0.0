// This file was generated by liblab | https://liblab.com/

using PinnacleBets.Config;
using PinnacleBets.Http.Handlers;
using PinnacleBets.Services;
using Environment = PinnacleBets.Http.Environment;

namespace PinnacleBets;

public class PinnacleBetsClient : IDisposable
{
    private readonly HttpClient _httpClient;
    private readonly BasicAuthHandler _basicAuthHandler;

    public PlaceBetsService PlaceBets { get; private set; }
    public GetBetsService GetBets { get; private set; }
    public BettingStatusService BettingStatus { get; private set; }

    public PinnacleBetsClient(PinnacleBetsConfig? config = null)
    {
        var retryHandler = new RetryHandler();
        _basicAuthHandler = new BasicAuthHandler(retryHandler);
        if (config?.BasicAuth is not null)
        {
            _basicAuthHandler.SetBasicAuthToken(
                config.BasicAuth.UserName,
                config.BasicAuth.Password
            );
        }

        _httpClient = new HttpClient(_basicAuthHandler)
        {
            BaseAddress = config?.Environment?.Uri ?? Environment.Default.Uri,
            DefaultRequestHeaders = { { "user-agent", "dotnet/7.0" } }
        };

        PlaceBets = new PlaceBetsService(_httpClient);
        GetBets = new GetBetsService(_httpClient);
        BettingStatus = new BettingStatusService(_httpClient);
    }

    /// <summary>
    /// Set the environment for the entire SDK.
    /// </summary>
    public void SetEnvironment(Environment environment)
    {
        SetBaseUrl(environment.Uri);
    }

    /// <summary>
    /// Sets the base URL for entire SDK.
    /// </summary>
    public void SetBaseUrl(string baseUrl)
    {
        SetBaseUrl(new Uri(baseUrl));
    }

    /// <summary>
    /// Sets the base URL for the entire SDK.
    /// </summary>
    public void SetBaseUrl(Uri uri)
    {
        _httpClient.BaseAddress = uri;
    }

    /// <summary>
    /// Sets the userName and password for the entire SDK.
    /// </summary>
    public void SetBasicAuth(string userName, string password)
    {
        _basicAuthHandler.SetBasicAuthToken(userName, password);
    }

    public void Dispose()
    {
        _httpClient.Dispose();
    }
}

// c029837e0e474b76bc487506e8799df5e3335891efe4fb02bda7a1441840310c
